version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: echointunee-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: echointunee
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/config/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - echointunee-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: echointunee-backend
    environment:
      PORT: 5002
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: echointunee
      JWT_SECRET: dev-secret-change-in-production
      JWT_EXPIRES_IN: 7d
      ML_SERVICE_URL: http://ml-service:5001
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - echointunee-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: echointunee-ml
    environment:
      FLASK_ENV: development
      PORT: 5001
      CORS_ORIGINS: http://localhost:3000,http://localhost:5002
    ports:
      - "5001:5001"
    networks:
      - echointunee-network
    volumes:
      - ./ml-service:/app
    command: python app.py

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: echointunee-frontend
    environment:
      VITE_API_URL: http://localhost:5002/api
      VITE_ML_API_URL: http://localhost:5001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - ml-service
    networks:
      - echointunee-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host

networks:
  echointunee-network:
    driver: bridge

volumes:
  postgres-data:

